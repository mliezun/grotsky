name: release

on:
  push:
    branches:
      - v0.*

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:

    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.15
      id: go

    - name: Check out code into the Go module directory
      uses: actions/checkout@v2

    - name: Get dependencies
      run: |
        go get -v -t -d ./...
        if [ -f Gopkg.toml ]; then
            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
            dep ensure
        fi

    - name: Build
      run: go build -v ./cmd/grotsky/

    - name: Test
      run: |
        go test -v -race -coverprofile=coverage.txt -covermode=atomic github.com/mliezun/grotsky/internal
        bash <(curl -s https://codecov.io/bash)

    - name: Prepare Release Linux
      run: tar -czvf grotsky-${GITHUB_REF##*/}-linux-x86_64.tar.gz grotsky

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${GITHUB_REF##*/}
        release_name: Release ${GITHUB_REF##*/}
        body: |
          Automated Release
        draft: false
        prerelease: false
          
    - name: Upload Release Linux
      id: upload-release-linux
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: ./grotsky-${GITHUB_REF##*/}-linux-x86_64.tar.gz
        asset_name: grotsky-${GITHUB_REF##*/}-linux-x86_64.tar.gz
        asset_content_type: application/gzip
