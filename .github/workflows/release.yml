name: release

on:
  push:
    branches:
      - v0.*
      - master

jobs:
  build-linux:
    name: Build Rust version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install latest stable
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.85.0
          override: true
          components: rustfmt, clippy

      - name: Install deps
        run: |
          sudo apt-get install make
          rustup target add aarch64-apple-darwin

      - name: Build for linux
        run: |
          cargo build --release
          mv target/release/grotsky-rs grotsky-linux

      - name: Build for mac arm64
        run: |
          cargo build --release --target aarch64-apple-darwin
          mv target/aarch64-apple-darwin/release/grotsky-rs grotsky-mac

      # - name: Build for mac x86_64
      #   run: |
      #     cargo build --release --target x86_64-apple-darwin
      #     mv target/x86_64-apple-darwin/release/grotsky-rs grotsky-mac

      - name: Extract branch name
        shell: bash
        run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        id: extract_branch

      - name: Prepare Release Linux
        run: |
          mv grotsky-linux grotsky
          tar -czvf grotsky-${{ steps.extract_branch.outputs.branch }}-linux-x86_64.tar.gz grotsky

      - name: Prepare Release macos arm64
        run: |
          mv grotsky-mac grotsky
          tar -czvf grotsky-${{ steps.extract_branch.outputs.branch }}-macos-aarch64.tar.gz grotsky

      # - name: Create Release
      #   id: create_release
      #   uses: actions/create-release@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     tag_name: ${{ steps.extract_branch.outputs.branch }}
      #     release_name: Release ${{ steps.extract_branch.outputs.branch }}
      #     body: |
      #       Automated Release
      #     draft: false
      #     prerelease: false

      # - name: Upload Release Linux
      #   id: upload-release-linux
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      #     asset_path: ./grotsky-${{ steps.extract_branch.outputs.branch }}-linux-x86_64.tar.gz
      #     asset_name: grotsky-${{ steps.extract_branch.outputs.branch }}-linux-x86_64.tar.gz
      #     asset_content_type: application/gzip

      # - name: Upload Release macos arm64
      #   id: upload-release-macos-arm64
      #   uses: actions/upload-release-asset@v1
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #   with:
      #     upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps
      #     asset_path: ./grotsky-${{ steps.extract_branch.outputs.branch }}-macos-aarch64.tar.gz
      #     asset_name: grotsky-${{ steps.extract_branch.outputs.branch }}-macos-aarch64.tar.gz
      #     asset_content_type: application/gzip

  build-macos:
    name: Build on macOS (Apple Silicon target)
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install Rust toolchain and Apple Silicon target
      run: |
        rustup update
        rustup target add aarch64-apple-darwin

    - name: Build release binary
      run: cargo build --release --target=aarch64-apple-darwin

    - name: Upload binary
      uses: actions/upload-artifact@v3
      with:
        name: grotsky-rs-macos-aarch64
        path: target/aarch64-apple-darwin/release/grotsky-rs
