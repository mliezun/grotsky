expression      → list | dictionary | assignment;
list            → "[" arguments? "]";
dictionary      → "{" dict_elements? "}";
dict_elements   → keyval ("," keyval)*;
keyval          → assignment ":" expression;
assignment      → (call ".")? IDENTIFIER "=" assignment | logic_or;
logic_or        → logic_and ("or" logic_and)*;
logic_and       → equality ("and" equality)*;
equality        → comparison (("!=" | "==") comparison)*;
comparison      → addition ((">" | ">=" | "<" | "<=") addition)*;
addition        → multiplication (("-" | "+") multiplication)*;
multiplication  → power (("/" | "*") power)*;
power           → unary ("^" unary)*;
unary           → ("not" | "-") unary | call;
call            → access ("(" arguments? ")" | "." IDENTIFIER)*;
arguments       → expression ("," expression)*;
access          → primary "[" (slice | expression) "]";
slice           → NUMBER (":" NUMBER? (":" NUMBER)?)?;
primary         → NUMBER
                | STRING
                | "false"
                | "true"
                | "nil"
                | IDENTIFIER
                | "(" expression ")"
                | fnAnon;
fnAnon          → "fn" "(" parameters? ")" block;

program        → declaration* EOF;
declaration    → classDecl | funDecl | varDecl | statement;
classDecl      → "class" IDENTIFIER ( "<" IDENTIFIER )? "begin" methodDecl* "end" NEWLINE;
methodDecl     → "class"? function;
funDecl        → "fn" function ;
function       → IDENTIFIER "(" parameters? ")" block ;
parameters     → IDENTIFIER ( "," IDENTIFIER )* ;
varDecl        → "let" IDENTIFIER ("=" expression)? NEWLINE;
statement      → forStmt
                | ifStmt
                | returnStmt
                | whileStmt
                | exprStmt;
exprStmt       → expression NEWLINE;
forStmt        → "for"  (classicFor | newFor) statement;
classicFor     → (varDecl | exprStmt | ",") expression? "," expression?;
newFor         → IDENTIFIER ("," IDENTIFIER)? "in" expression;
ifStmt         → "if" expression statement ("elif" expression statement)* ("else" statement)?;
returnStmt     → "return" expression? NEWLINE;
whileStmt      → "while" expression statement;
block          → "begin" NEWLINE declaration* "end" NEWLINE;
